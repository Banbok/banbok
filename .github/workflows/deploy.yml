name: Deploy Backend to GCP VM

on:
  push:
    branches: [ main ]
    paths:
      - 'apps/backend/**'
      - 'packages/**'
      - 'docker-compose.yml'
      - '.github/workflows/deploy.yml'

  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: banbok-backend
  VM_NAME: banbok-vm
  ZONE: asia-northeast3-c

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Check current service account
        run: gcloud auth list --filter=status:ACTIVE --format="value(account)"

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker asia-northeast3-docker.pkg.dev

      - name: Clean up Docker system
        run: docker system prune -af --volumes

      - name: Build and push Docker image
        run: |
          docker build -f apps/backend/Dockerfile -t asia-northeast3-docker.pkg.dev/$PROJECT_ID/banbok/$SERVICE_NAME:$GITHUB_SHA .
          docker push asia-northeast3-docker.pkg.dev/$PROJECT_ID/banbok/$SERVICE_NAME:$GITHUB_SHA

      - name: Create environment file
        run: |
          cat > .env.production << EOF
          NODE_ENV=production
          DATABASE_HOST=${{ secrets.DATABASE_HOST }}
          DATABASE_PORT=${{ secrets.DATABASE_PORT }}
          DATABASE_USER=${{ secrets.DATABASE_USER }}
          DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
          DATABASE_NAME=${{ secrets.DATABASE_NAME }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}
          CORS_METHODS=${{secrets.CORS_METHODS }}
          CORS_CREDENTIALS=${{ secrets.CORS_CREDENTIALS }}
          CORS_OPTIONS_STATUS=${{ secrets.CORS_OPTIONS_STATUS }}
          CORS_SAME_SITE=${{ secrets.CORS_SAME_SITE }}
          FRONTEND_URL=${{ secrets.FRONTEND_URL }}
          NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}
          NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}
          NAVER_CALLBACK_URL=${{ secrets.NAVER_CALLBACK_URL }}
          SMTP_HOST=${{ secrets.SMTP_HOST }}
          SMTP_PORT=${{ secrets.SMTP_PORT }}
          SMTP_USER=${{ secrets.SMTP_USER }}
          SMTP_PASS=${{ secrets.SMTP_PASS }}
          FROM=${{secrets.SMTP_FROM}}
          BACKEND_IMAGE=asia-northeast3-docker.pkg.dev/$PROJECT_ID/banbok/$SERVICE_NAME:$GITHUB_SHA
          EOF

      - name: Deploy to VM
        run: |
          # Create banbok directory on VM
          gcloud compute ssh ${{ secrets.VM_NAME }} \
            --zone=${{ secrets.GCP_ZONE }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --command="mkdir -p ~/banbok"

          # Copy files to VM
          gcloud compute scp docker-compose.yml ${{ secrets.VM_NAME }}:~/banbok/ \
            --zone=${{ secrets.GCP_ZONE }} \
            --project=${{ secrets.GCP_PROJECT_ID }}
          gcloud compute scp .env.production ${{ secrets.VM_NAME }}:~/banbok/.env \
            --zone=${{ secrets.GCP_ZONE }} \
            --project=${{ secrets.GCP_PROJECT_ID }}

          # Configure Docker for GCR and deploy
          gcloud compute ssh ${{ secrets.VM_NAME }} \
            --zone=${{ secrets.GCP_ZONE }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --command="
              cd ~/banbok &&
              docker system prune -af --volumes &&
              gcloud auth configure-docker asia-northeast3-docker.pkg.dev --quiet &&
              docker compose down &&
              docker compose pull &&
              docker compose up -d
            "

      - name: Run Database Migration
        run: |
          # Wait for backend container to be ready
          sleep 30
          
          # Push database schema directly (simpler than generate + migrate)
          gcloud compute ssh ${{ secrets.VM_NAME }} \
            --zone=${{ secrets.GCP_ZONE }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --command="
              cd ~/banbok &&
              docker compose exec -T backend npm run db:push
            "

      - name: Get VM external IP
        run: |
          VM_IP=$(gcloud compute instances describe ${{ secrets.VM_NAME }} --zone=${{ secrets.GCP_ZONE }} --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
          echo "ðŸš€ Deployment successful!"
          echo "VM IP: http://$VM_IP"
