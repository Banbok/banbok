services:
  redis:
    image: redis:7-alpine
    container_name: banbok-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - banbok-network
    command: redis-server --appendonly yes

  backend:
    image: ${BACKEND_IMAGE:-banbok-backend:latest}
    container_name: banbok-backend
    ports:
      - "80:3001"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=${PORT:-3001}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-7d}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - CORS_METHODS=${CORS_METHODS}
      - CORS_CREDENTIALS=${CORS_CREDENTIALS}
      - CORS_OPTIONS_STATUS=${CORS_OPTIONS_STATUS}
      - CORS_SAME_SITE=${CORS_SAME_SITE}
      - FRONTEND_URL=${FRONTEND_URL}
      - NAVER_CLIENT_ID=${NAVER_CLIENT_ID}
      - NAVER_CLIENT_SECRET=${NAVER_CLIENT_SECRET}
      - NAVER_CALLBACK_URL=${NAVER_CALLBACK_URL}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - FROM=${FROM}
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - banbok-network

volumes:
  redis_data:

networks:
  banbok-network:
    driver: bridge
